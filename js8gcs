#!/usr/bin/env ruby

# NOTE: this script uses the gcs script to get the details of the callsign
# and it EXPECTS the gcs script to be in the same directory as this script
# if you put gcs into another directory, then the "gcs_path" variable

# this script interrogates js8call to find out what callsign is currently SELECTED
# and automatically calls gcs, to find out the details.
# this works just fine on the Raspberry Pi

# usage: js8gcs [-n]

require 'socket'
require 'json'
require 'mkmf'

opt = ARGV[0]

gcs_path = find_executable "gcs"
host = 'localhost'
port = 2237
s = UDPSocket.new
s.bind(host, port)

jstr = '{"params": {}, "type": "RX.GET_CALL_SELECTED"}'
get_grid= '{"params": {}, "type": "STATION.GET_GRID"}'
my_grid = ""
current_cs = ""
# js8call is the client. So act as a server ought to and recv connection
# from client

data, client = s.recvfrom(1024)

# now client[1] is the socket of the client
# so send the jstr to client[1] in a infinite loop
loop do
  if my_grid == ""
    s.send(get_grid, 0, host, client[1])
    sleep 1
  else
    s.send(jstr, 0, host, client[1])
  end
  # now get data from a connection

  data, client = s.recvfrom(512)

  # convert to a hash and print the "value"
  begin
    jdata = JSON.parse(data)
  rescue
    next
  end
  if jdata["value"] != current_cs and jdata["type"] == "RX.CALL_SELECTED"
    # I have a gcs script that prints out pertinent info
    # given a callsign

    #Set selected callsign to current callsign
    current_cs = jdata["value"]

    if current_cs != "" and current_cs[0] != '@'
      unless opt
        puts `#{gcs_path} -n #{current_cs} -g #{my_grid} -w`
      else
        puts current_cs
      end
    end
  elsif jdata["type"] == "STATION.GRID"
    my_grid = jdata["value"][0,6]
  end
end
