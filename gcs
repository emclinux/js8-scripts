#!/usr/bin/env ruby

# Script to get callsign data
# usage: gcs callsign
#
# this ruby script uses nokogiri
# which must be installed:
#    gem install nokogiri notify dx-grid geocoder
#
#    prerequisite for nokogiri is ruby-dev
#    install that by: sudo apt-get install ruby-dev

begin
  require 'open-uri'
  require 'nokogiri'
  require 'notify'
  require 'optparse'
  require 'dx/grid'
  require 'geocoder'
rescue LoadError
  puts "Not all required gems installed.  Tring to install"
  #Run as sudo as Ubuntu/Debian ruby package doesnt use the best method for gem install permissions.
  #If you dont want this as sudo then you can chown /var/lib/gem to give your user access or use RVM
  puts "Running: sudo gem install nokogiri notify dx-grid geocoder"
  system("sudo gem install nokogiri notify dx-grid geocoder")
end
#Second round try of gem loading
Gem.clear_paths
begin
  require 'open-uri'
  require 'nokogiri'
  require 'notify'
  require 'optparse'
  require 'dx/grid'
  require 'geocoder'
rescue LoadError
  puts "Required gems could not be install.  Please install the following gems and run this script again"
  puts "Gems needed: okogiri notify dx-grid geocoder"
end

#Get command line options
options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage gcs [options] callsign"
  opts.on('-n', '--notify', 'Enable OS notifications') do |n|
    options[:notify] = n
  end
  opts.on('-g GRID', '--my-grid=GRID', 'Get distance and bearing from your grid') do |g|
    options[:grid] = g
  end
    opts.on('-w', '--web', 'Enable webpage open') do |w|
    options[:web] = w
  end

end.parse!

baseurl = 'https://www.hamqth.com/'
cs = ARGV[0].upcase
url = baseurl + cs
miles = 0.00062137
km = 0.001

printf "Callsign: %s\n", cs

def mkdata(tr)
  itxt = tr.text
  data = itxt.lstrip.rstrip.split(':')
end

def dist_bearing(home_grid, remote_grid)
  #Break grid in to long/lat
  home = DX::Grid.decode(home_grid)
  remote = DX::Grid.decode(remote_grid)
  bearing = Geocoder::Calculations.bearing_between(home, remote)
  distance = Geocoder::Calculations.distance_between(home, remote)
  return distance, bearing
end

doc = Nokogiri::HTML(open(url))
data = doc.css('tr')
grid = ""
notificaton = ""
city, state = "", ""

# make it so we don't need -g if and only if GCSGRID is set as env var
unless options.include? :grid
  unless ENV['GCSGRID'].nil?
    options[:grid] = ENV['GCSGRID']
  end
end

data.each {|d|
  case d.text
  when /Name:/
    data = mkdata(d)
    printf "%-8s : %-20s\n", data[0], data[1]
    notificaton.concat("#{data[0]}\t: #{data[1]}\n")
  when /QTH:/
    data = mkdata(d)
    printf "%-8s : %-20s\n", data[0], data[1]
    notificaton.concat("#{data[0]}\t: #{data[1]}\n")
    city = data[1]
  when /State:/
    data = mkdata(d)
    printf "%-8s : %-20s\n", data[0], data[1]
    notificaton.concat("#{data[0]}\t: #{data[1]}\n")
    state = data[1]
  when /Country:/
    data = mkdata(d)
    printf "%-8s : %-20s\n", data[0], data[1]
    notificaton.concat("#{data[0]}\t: #{data[1]}\n")
  when /Grid:/
    data = mkdata(d)
    grid = data[1]
    if options[:grid]
       distbearing = dist_bearing(options[:grid], grid)
       p distbearing
       distance = distbearing[0].round
       bearing = distbearing[1].round
       printf "%-8s : %s (%s Miles @ %s Degrees)\n", data[0], data[1], distance, bearing
       notificaton.concat("#{data[0]}\t: #{data[1]} (#{distance} Miles @ #{bearing} Degrees)\n")
    else
      printf "%-8s : %s\n", data[0], data[1]
      notificaton.concat("#{data[0]}\t: #{data[1]}\n")
    end
  end
}

qth = city + state
qth = qth.gsub ' ', '+'

puts " "
worked = `awk -F, '{print $1, $5}' $HOME/.local/share/JS8Call/js8call.log 2>/dev/null | grep -i #{cs}`
if worked == ""
  worked = "No"
end
puts "Worked before (JS8): #{worked}"
if options[:notify]
  notificaton.concat("Worked before (JS8): #{worked}")
  notificaton.concat("\n\nmap at: http://maps.google.com?q=#{qth}")

  Notify.notify "Callsign info for #{cs}", notificaton, { app_name: "GCS for JS8Call" }
end

puts ""
puts "map at: http://maps.google.com?q=#{qth}"

if options[:web]
  system "xdg-open https://www.qrz.com/db/#{cs} >/dev/null 2>&1 &"
end
